const { joinVoiceChannel, createAudioPlayer, createAudioResource, VoiceConnectionStatus, entersState, getVoiceConnection } = require('@discordjs/voice');
const { spawn } = require('child_process');
const LeaderboardTracker = require('./enhancedLeaderboardTracker');
const MusicTracker = require('./musicTracker');
const spotifyService = require('./spotdlService');

class VoiceManager {
    constructor() {
        this.connections = new Map(); // guildId -> connection
        this.players = new Map(); // guildId -> player
        this.processes = new Map(); // guildId -> ytdlpProcess
        this.volumes = new Map(); // guildId -> volume (0-1)
        this.queues = new Map(); // guildId -> queue array
        this.currentTrack = new Map(); // guildId -> current track info
        this.isLooping = new Map(); // guildId -> loop mode
        this.isShuffled = new Map(); // guildId -> shuffle state
        this.textChannels = new Map(); // guildId -> text channel
        this.musicMessages = new Map(); // guildId -> array of message objects with timestamps
        this.playStartTimes = new Map(); // guildId -> timestamp when music started playing
        
        // D√©marrer le nettoyage p√©riodique toutes les 5 minutes
        this.startPeriodicCleanup();
    }

    async joinChannel(channel, textChannel = null) {
        const guildId = channel.guild.id;
        
        // Si d√©j√† connect√©, d√©connecter d'abord
        if (this.connections.has(guildId)) {
            await this.leaveChannel(channel.guild);
        }

        const connection = joinVoiceChannel({
            channelId: channel.id,
            guildId: channel.guild.id,
            adapterCreator: channel.guild.voiceAdapterCreator,
            selfDeaf: false,
            selfMute: false
        });

        await entersState(connection, VoiceConnectionStatus.Ready, 30e3);
        
        const player = createAudioPlayer();
        
        // Gestion d'erreur pour le player
        player.on('error', (error) => {
            // Ignorer les erreurs de stream pr√©matur√© (normales)
            if (!error.message.includes('Premature close')) {
                console.error('Erreur du player audio:', error);
            }
        });

        connection.subscribe(player);

        this.connections.set(guildId, connection);
        this.players.set(guildId, player);

        // Initialiser la queue et les √©tats
        if (!this.queues.has(guildId)) {
            this.queues.set(guildId, []);
        }
        this.isLooping.set(guildId, false);
        this.isShuffled.set(guildId, false);
        
        // Stocker le canal de texte si fourni
        if (textChannel) {
            this.textChannels.set(guildId, textChannel);
        }

        return { connection, player };
    }

    async leaveChannel(guild) {
        const guildId = guild.id;
        
        // Tuer le processus yt-dlp s'il existe
        if (this.processes.has(guildId)) {
            this.processes.get(guildId).kill();
            this.processes.delete(guildId);
        }

        // D√©connecter seulement si la connexion existe et n'est pas d√©j√† d√©truite
        if (this.connections.has(guildId)) {
            const connection = this.connections.get(guildId);
            try {
                // V√©rifier l'√©tat de la connexion avant de la d√©truire
                if (connection.state.status !== 'destroyed' && connection.state.status !== 'disconnected') {
                    console.log(`üîå D√©connexion de la voix pour guild: ${guild.name}`);
                    connection.destroy();
                } else {
                    console.log(`üîå Connexion d√©j√† d√©truite pour guild: ${guild.name}`);
                }
            } catch (error) {
                console.log(`‚ö†Ô∏è Erreur lors de la d√©connexion (connexion d√©j√† d√©truite): ${error.message}`);
            }
            this.connections.delete(guildId);
            this.players.delete(guildId);
        }

        // Nettoyer la queue et les √©tats
        this.queues.delete(guildId);
        this.currentTrack.delete(guildId);
        this.isLooping.delete(guildId);
        this.isShuffled.delete(guildId);
        this.volumes.delete(guildId);
        this.textChannels.delete(guildId);
        this.musicMessages.delete(guildId);
    }

    async addToQueue(guild, videoInfo, videoUrl) {
        const guildId = guild.id;
        
        const track = {
            title: videoInfo.title,
            url: videoUrl,
            duration: videoInfo.duration,
            thumbnail: videoInfo.thumbnail,
            uploader: videoInfo.uploader,
            addedBy: guild.members.cache.get(guild.members.cache.firstKey())?.user.tag || 'Inconnu'
        };

        if (!this.queues.has(guildId)) {
            this.queues.set(guildId, []);
        }

        this.queues.get(guildId).push(track);
        return track;
    }

    async playMusic(guild, videoUrl, videoInfo = null, isSpotifySearch = false) {
        const guildId = guild.id;
        console.log('üîç [DEBUG] playMusic appel√©, guildId:', guildId);
        console.log('üîç [DEBUG] videoUrl:', videoUrl);
        console.log('üîç [DEBUG] isSpotifySearch:', isSpotifySearch);
        console.log('üîç [DEBUG] videoInfo:', videoInfo ? videoInfo.title : 'NULL');
        
        if (!this.connections.has(guildId)) {
            console.log('‚ùå [DEBUG] Bot pas connect√© au salon vocal');
            throw new Error('Bot pas connect√© au salon vocal');
        }

        // Cr√©er la track
        const track = {
            title: videoInfo.title,
            url: videoUrl,
            duration: videoInfo.duration,
            thumbnail: videoInfo.thumbnail,
            uploader: videoInfo.uploader,
            isSpotify: isSpotifySearch
        };
        console.log('üîç [DEBUG] Track cr√©√©e:', track.title, 'isSpotify:', track.isSpotify);

        // Si pas de musique en cours, jouer imm√©diatement
        const isCurrentlyPlaying = this.isPlaying(guild);
        console.log('üîç [DEBUG] Musique en cours:', isCurrentlyPlaying);
        
        if (!isCurrentlyPlaying) {
            console.log('üîç [DEBUG] Pas de musique en cours, appel de playNext...');
            return await this.playNext(guild, videoUrl, videoInfo, isSpotifySearch);
        } else {
            console.log('üîç [DEBUG] Musique en cours, ajout √† la queue');
            // Ajouter √† la queue
            if (!this.queues.has(guildId)) {
                this.queues.set(guildId, []);
            }
            this.queues.get(guildId).push(track);
            console.log('üîç [DEBUG] Track ajout√©e √† la queue');
            return track;
        }
    }

    async playNext(guild, videoUrl = null, videoInfo = null, isSpotifySearch = false) {
        const guildId = guild.id;
        const queue = this.queues.get(guildId) || [];
        
        let track;
        let urlToPlay;
        
        if (videoUrl && videoInfo) {
            // Musique directe (premi√®re musique)
            track = {
                title: videoInfo.title,
                url: videoUrl,
                duration: videoInfo.duration,
                thumbnail: videoInfo.thumbnail,
                uploader: videoInfo.uploader,
                isSpotify: isSpotifySearch
            };
            urlToPlay = videoUrl;
        } else if (queue.length > 0) {
            // Prendre la premi√®re de la queue
            track = queue.shift();
            // Mettre √† jour la queue dans le Map
            this.queues.set(guildId, queue);
            urlToPlay = track.url;
        } else {
            // Pas de musique √† jouer - arr√™ter
            this.currentTrack.delete(guildId);
            return null;
        }

        const player = this.players.get(guildId);
        
        // Tuer l'ancien processus s'il existe
        if (this.processes.has(guildId)) {
            this.processes.get(guildId).kill();
        }

        // G√©rer les URLs selon leur type
        let audioResource;
        
        if (track.isSpotify || urlToPlay.includes('spotify.com')) {
            console.log('üéµ [DEBUG] URL Spotify d√©tect√©e, extraction directe...');
            
            try {
                console.log('üîç [DEBUG] Appel de spotifyService.getSpotifyStream...');
                // Utiliser le service Spotify pour obtenir le stream direct
                const streamData = await spotifyService.getSpotifyStream(urlToPlay);
                console.log('üîç [DEBUG] Stream data re√ßu dans voiceManager');
                console.log('üîç [DEBUG] Stream data type:', streamData.type);
                console.log('üîç [DEBUG] Stream data stream:', streamData.stream ? 'OUI' : 'NON');
                
                // Le stream est d√©j√† un Readable stream, l'utiliser directement
                const audioStream = streamData.stream;
                console.log('üîç [DEBUG] Audio stream extrait, type:', audioStream.constructor.name);
                console.log('üîç [DEBUG] Type de stream data:', streamData.type);
                
                console.log('üîç [DEBUG] Cr√©ation de la ressource audio...');
                
                // G√©rer diff√©remment selon le type de stream
                if (streamData.type === 'youtube-with-spotify-metadata') {
                    // Stream YouTube avec m√©tadonn√©es Spotify
                    audioResource = createAudioResource(audioStream, {
                        inputType: 'arbitrary',
                        volume: this.volumes.get(guildId) || 1.0
                    });
                    console.log('üîç [DEBUG] Ressource audio YouTube cr√©√©e avec m√©tadonn√©es Spotify');
                } else if (streamData.type === 'spotify-simulated-stream') {
                    // Stream Spotify simul√© (fichier temporaire)
                    audioResource = createAudioResource(audioStream, {
                        inputType: 'arbitrary',
                        volume: this.volumes.get(guildId) || 1.0,
                        inlineVolume: true
                    });
                    console.log('üîç [DEBUG] Ressource audio Spotify simul√©e cr√©√©e');
                } else if (streamData.type === 'librespot-direct') {
                    // Stream Librespot direct (audio r√©el Spotify)
                    audioResource = createAudioResource(audioStream, {
                        inputType: 'arbitrary',
                        volume: this.volumes.get(guildId) || 1.0,
                        inlineVolume: true
                    });
                    console.log('üîç [DEBUG] Ressource audio Librespot cr√©√©e');
                } else if (streamData.type === 'spotdl-direct') {
                    // Stream SpotDL direct (audio r√©el Spotify)
                    audioResource = createAudioResource(audioStream, {
                        inputType: 'arbitrary',
                        volume: this.volumes.get(guildId) || 1.0,
                        inlineVolume: true
                    });
                    console.log('üîç [DEBUG] Ressource audio SpotDL cr√©√©e');
                } else {
                    // Stream Spotify (preview ou autres)
                    audioResource = createAudioResource(audioStream, {
                        inputType: 'arbitrary',
                        volume: this.volumes.get(guildId) || 1.0
                    });
                    console.log('üîç [DEBUG] Ressource audio Spotify cr√©√©e');
                }
                
                console.log(`‚úÖ [DEBUG] Stream ${streamData.type} cr√©√© avec succ√®s`);
                
                // Stream Spotify pr√™t
                console.log('üéµ [DEBUG] Stream Spotify configur√© avec succ√®s');
            } catch (error) {
                console.error('‚ùå [DEBUG] Erreur extraction Spotify dans voiceManager:', error.message);
                console.error('‚ùå [DEBUG] Stack trace voiceManager:', error.stack);
                throw new Error(`Impossible de lire la musique Spotify: ${error.message}`);
            }
        } else {
            console.log('üé• URL YouTube d√©tect√©e, extraction avec yt-dlp...');
            
            // Cr√©er le nouveau processus yt-dlp pour YouTube
            const ytdlpProcess = spawn('yt-dlp', [
                '-f', 'bestaudio',
                '--no-playlist',
                '-o', '-',
                urlToPlay
            ], { stdio: ['ignore', 'pipe', 'ignore'] });

            this.processes.set(guildId, ytdlpProcess);
            
            // Cr√©er la ressource audio depuis le stream YouTube
            audioResource = createAudioResource(ytdlpProcess.stdout, {
                inputType: 'arbitrary',
                volume: this.volumes.get(guildId) || 1.0
            });
        }

        // La ressource audio est d√©j√† cr√©√©e selon le type (Spotify ou YouTube)

        // D√©marrer le tracking du temps de diffusion
        this.playStartTimes.set(guildId, Date.now());
        
        // Mettre √† jour le tracker de musique pour le leaderboard
        LeaderboardTracker.updateMusicPlayTime(15); // 15 secondes par d√©faut

        // Gestion d'erreur pour √©viter les logs d'erreur
        audioResource.playStream.on('error', (error) => {
            // Ignorer les erreurs de stream pr√©matur√© (normales)
            if (!error.message.includes('Premature close')) {
                console.error('Erreur de stream audio:', error);
            }
        });

        // Supprimer tous les anciens listeners stateChange
        player.removeAllListeners('stateChange');
        
        // G√©rer la fin de la musique
        player.on('stateChange', (oldState, newState) => {
            if (newState.status === 'idle' && oldState.status === 'playing') {
                console.log('üéµ Musique termin√©e');
                
                // Mettre √† jour le temps de diffusion du bot
                if (this.playStartTimes.has(guildId)) {
                    const playTime = Math.floor((Date.now() - this.playStartTimes.get(guildId)) / 1000);
                    LeaderboardTracker.updateMusicPlayTime(playTime);
                    this.playStartTimes.delete(guildId);
                }
                
                // Si en mode loop, remettre la musique en queue
                if (this.isLooping.get(guildId) && track) {
                    this.queues.get(guildId).unshift(track);
                }
                
                // V√©rifier s'il y a une musique suivante
                const remainingQueue = this.queues.get(guildId) || [];
                if (remainingQueue.length > 0) {
                    // Jouer la suivante imm√©diatement
                    this.playNext(guild).then(nextTrack => {
                        // Envoyer les boutons seulement lors des changements automatiques
                        if (nextTrack) {
                            this.sendMusicButtons(guild, nextTrack);
                        }
                    });
                } else {
                    // Plus de musique - arr√™ter
                    console.log(`üõë VoiceManager: Suppression currentTrack pour guildId=${guildId} (fin de queue)`);
                    this.currentTrack.delete(guildId);
                    MusicTracker.clearCurrentTrack(guildId);
                }
            }
        });

        // Sauvegarder la track actuelle AVANT de jouer (dans les deux syst√®mes)
        console.log(`üéµ [DEBUG] VoiceManager: D√©finition currentTrack pour guildId=${guildId}, titre=${track.title}`);
        this.currentTrack.set(guildId, track);
        MusicTracker.setCurrentTrack(guildId, track);
        
        console.log('üîç [DEBUG] D√©marrage de la lecture avec player.play()...');
        console.log('üîç [DEBUG] AudioResource cr√©√©e:', audioResource ? 'OUI' : 'NON');
        console.log('üîç [DEBUG] Player disponible:', player ? 'OUI' : 'NON');
        
        player.play(audioResource);
        console.log('üîç [DEBUG] player.play() appel√©');
        
        // Ajouter des listeners pour debug
        audioResource.playStream.on('error', (error) => {
            console.error('‚ùå [DEBUG] Erreur playStream:', error.message);
        });
        
        audioResource.playStream.on('end', () => {
            console.log('üîç [DEBUG] playStream termin√©');
        });
        
        audioResource.playStream.on('start', () => {
            console.log('üîç [DEBUG] playStream d√©marr√©');
        });

        return track;
    }

    pause(guild) {
        const guildId = guild.id;
        if (this.players.has(guildId)) {
            this.players.get(guildId).pause();
        }
    }

    resume(guild) {
        const guildId = guild.id;
        if (this.players.has(guildId)) {
            this.players.get(guildId).unpause();
        }
    }

    stop(guild) {
        const guildId = guild.id;
        
        // Tuer le processus yt-dlp
        if (this.processes.has(guildId)) {
            this.processes.get(guildId).kill();
            this.processes.delete(guildId);
        }

        // Arr√™ter le player
        if (this.players.has(guildId)) {
            this.players.get(guildId).stop();
        }

        // Vider la queue et supprimer la track actuelle
        this.queues.set(guildId, []);
        this.currentTrack.delete(guildId);
    }

    setVolume(guild, volume) {
        const guildId = guild.id;
        const volumeValue = volume / 100; // Convertir de 0-100 √† 0-1
        
        // Sauvegarder le volume pour la prochaine musique
        this.volumes.set(guildId, volumeValue);
        
        // Note: Le volume sera appliqu√© √† la prochaine musique jou√©e
        // @discordjs/voice ne permet pas de changer le volume d'une ressource en cours
    }

    isConnected(guild) {
        const guildId = guild.id;
        return this.connections.has(guildId);
    }

    // M√©thode sp√©cifique pour v√©rifier les connexions YouTube (sans radio)
    isYouTubeConnected(guild) {
        const guildId = guild.id;
        
        // V√©rifier d'abord si c'est une connexion radio
        try {
            const radioModule = require('../commands/music/radio');
            if (radioModule.radioState && radioModule.radioState.connection && radioModule.radioState.connection.joinConfig.guildId === guildId) {
                console.log(`üìª Connexion radio d√©tect√©e pour guild: ${guild.name}, ne pas consid√©rer comme connexion YouTube`);
                return false; // Ne pas consid√©rer les connexions radio comme des connexions YouTube
            }
        } catch (error) {
            // Ignorer les erreurs de module
        }
        
        return this.connections.has(guildId);
    }

    isPlaying(guild) {
        const guildId = guild.id;
        if (this.players.has(guildId)) {
            return this.players.get(guildId).state.status === 'playing';
        }
        return false;
    }

    isPaused(guild) {
        const guildId = guild.id;
        if (this.players.has(guildId)) {
            return this.players.get(guildId).state.status === 'paused';
        }
        return false;
    }

    getVolume(guild) {
        const guildId = guild.id;
        const volume = this.volumes.get(guildId) || 1.0;
        return Math.round(volume * 100); // Convertir de 0-1 √† 0-100
    }

    // M√©thodes de queue
    getQueue(guild) {
        return this.queues.get(guild.id) || [];
    }

    getCurrentTrack(guildOrId) {
        const guildId = typeof guildOrId === 'string' ? guildOrId : guildOrId.id;
        
        // Essayer d'abord le MusicTracker (plus fiable)
        const musicTrackerTrack = MusicTracker.getCurrentTrack(guildId);
        if (musicTrackerTrack) {
            console.log(`üéµ VoiceManager.getCurrentTrack: Track trouv√©e via MusicTracker - ${musicTrackerTrack.title}`);
            return musicTrackerTrack;
        }
        
        // Fallback sur l'ancien syst√®me
        const current = this.currentTrack.get(guildId);
        console.log(`üîç VoiceManager.getCurrentTrack: guildId=${guildId}, current=${current ? 'TROUV√â' : 'NULL'} (fallback)`);
        if (current) {
            console.log(`üîç Track trouv√©e: ${current.title} par ${current.uploader}`);
        }
        
        return current;
    }

    async skip(guild) {
        const guildId = guild.id;
        if (this.players.has(guildId)) {
            this.players.get(guildId).stop();
            // playNext sera appel√© automatiquement par l'event stateChange
            // Mais on peut aussi l'appeler directement pour √™tre s√ªr
            setTimeout(() => {
                this.playNext(guild);
            }, 500);
        }
    }

    shuffle(guild) {
        const guildId = guild.id;
        const queue = this.queues.get(guildId) || [];
        
        // M√©langer la queue (algorithme Fisher-Yates)
        for (let i = queue.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [queue[i], queue[j]] = [queue[j], queue[i]];
        }
        
        this.isShuffled.set(guildId, true);
    }

    clearQueue(guild) {
        const guildId = guild.id;
        this.queues.set(guildId, []);
    }

    removeFromQueue(guild, index) {
        const guildId = guild.id;
        const queue = this.queues.get(guildId) || [];
        
        if (index >= 0 && index < queue.length) {
            return queue.splice(index, 1)[0];
        }
        return null;
    }

    setLoop(guild, mode) {
        const guildId = guild.id;
        this.isLooping.set(guildId, mode);
    }

    getLoopMode(guild) {
        return this.isLooping.get(guild.id) || false;
    }

    getShuffleState(guild) {
        return this.isShuffled.get(guild.id) || false;
    }

    async sendMusicButtons(guild, track) {
        const guildId = guild.id;
        const textChannel = this.textChannels.get(guildId);
        
        if (!textChannel || !track) return;

        // Supprimer TOUS les anciens messages de musique avant d'en cr√©er de nouveaux
        await this.cleanupOldMusicMessages(guildId, true);

        try {
            const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
            
            // Fonction pour formater la dur√©e
            const formatDuration = (seconds) => {
                if (!seconds) return 'Inconnue';
                const hours = Math.floor(seconds / 3600);
                const minutes = Math.floor((seconds % 3600) / 60);
                const secs = seconds % 60;
                
                if (hours > 0) {
                    return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
                } else {
                    return `${minutes}:${secs.toString().padStart(2, '0')}`;
                }
            };

            // Fonction pour nettoyer l'uploader
            const cleanUploader = (uploader) => {
                if (!uploader) return 'Inconnu';
                return uploader
                    .replace(/\s*(TV|Officiel|Official|Music|VEVO|VEVO Music|VEVO Music Group)\s*/gi, '')
                    .replace(/\s+/g, ' ')
                    .trim();
            };

            // Cr√©er l'embed
            const embed = new EmbedBuilder()
                .setColor('#FF6B6B')
                .setTitle('üéµ Nouvelle musique en cours')
                .setDescription(`**[${track.title}](${track.url})**`)
                .addFields(
                    { name: 'üë§ **Artiste**', value: cleanUploader(track.uploader), inline: true },
                    { name: '‚è±Ô∏è **Dur√©e**', value: formatDuration(track.duration), inline: true },
                    { name: 'üîä **Volume**', value: `${this.getVolume(guild)}%`, inline: true }
                )
                .setThumbnail(track.thumbnail || 'https://via.placeholder.com/150')
                .setFooter({ text: 'üéµ Bot Musical' })
                .setTimestamp();

            // G√©n√©rer un ID unique pour cette musique
            const musicId = `${guildId}_${Date.now()}`;
            
            // Cr√©er les boutons avec des IDs uniques
            const actionRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`lyrics_button_${musicId}`)
                        .setLabel('Paroles')
                        .setStyle(ButtonStyle.Primary)
                        .setEmoji('üé§'),
                    new ButtonBuilder()
                        .setCustomId(`skip_button_${musicId}`)
                        .setLabel('Skip')
                        .setStyle(ButtonStyle.Danger)
                        .setEmoji('‚è≠Ô∏è'),
                    new ButtonBuilder()
                        .setCustomId(`queue_button_${musicId}`)
                        .setLabel('Queue')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('üìã'),
                    new ButtonBuilder()
                        .setCustomId(`nowplaying_button_${musicId}`)
                        .setLabel('Now Playing')
                        .setStyle(ButtonStyle.Secondary)
                        .setEmoji('üé∂')
                );

            const sentMessage = await textChannel.send({ 
                embeds: [embed], 
                components: [actionRow] 
            });
            
            // Ajouter le message √† la liste de surveillance pour suppression automatique
            this.addMusicMessage(guildId, sentMessage);
        } catch (error) {
            console.error('Erreur lors de l\'envoi des boutons:', error);
        }
    }

    // M√©thode pour ajouter un message √† la liste de surveillance
    addMusicMessage(guildId, message) {
        if (!this.musicMessages.has(guildId)) {
            this.musicMessages.set(guildId, []);
        }
        
        this.musicMessages.get(guildId).push({
            message: message,
            timestamp: Date.now()
        });
        
        // Programmer la suppression apr√®s 2 minutes
        setTimeout(() => {
            this.deleteOldMusicMessage(guildId, message);
        }, 120000); // 120 secondes (2 minutes)
    }

    // M√©thode pour supprimer un message sp√©cifique
    async deleteOldMusicMessage(guildId, messageToDelete) {
        try {
            const messages = this.musicMessages.get(guildId);
            if (!messages) return;

            // Trouver et supprimer le message de la liste
            const index = messages.findIndex(msg => msg.message.id === messageToDelete.id);
            if (index !== -1) {
                messages.splice(index, 1);
                
                // Supprimer le message de Discord
                await messageToDelete.delete();
                console.log('üóëÔ∏è Message de musique supprim√© automatiquement');
            }
        } catch (error) {
            console.error('Erreur lors de la suppression du message:', error);
        }
    }

    // M√©thode pour nettoyer tous les anciens messages d'une guild
    async cleanupOldMusicMessages(guildId, deleteAll = false) {
        try {
            const messages = this.musicMessages.get(guildId);
            if (!messages) return;

            const now = Date.now();
            const twoMinutesAgo = now - 120000; // 2 minutes en millisecondes

            for (let i = messages.length - 1; i >= 0; i--) {
                const msgData = messages[i];
                // Si deleteAll est true, supprimer tous les messages
                // Sinon, supprimer seulement ceux de plus de 2 minutes
                if (deleteAll || msgData.timestamp < twoMinutesAgo) {
                    try {
                        await msgData.message.delete();
                        messages.splice(i, 1);
                        console.log('üóëÔ∏è Ancien message de musique supprim√©');
                    } catch (error) {
                        console.error('Erreur lors de la suppression:', error);
                        messages.splice(i, 1); // Supprimer de la liste m√™me si la suppression √©choue
                    }
                }
            }
        } catch (error) {
            console.error('Erreur lors du nettoyage des messages:', error);
        }
    }

    // M√©thode pour d√©marrer le nettoyage p√©riodique
    startPeriodicCleanup() {
        // Nettoyer toutes les 5 minutes
        setInterval(() => {
            console.log('üßπ Nettoyage p√©riodique des anciens messages de musique...');
            
            for (const guildId of this.musicMessages.keys()) {
                this.cleanupOldMusicMessages(guildId);
            }
        }, 300000); // 5 minutes en millisecondes
    }

    // M√©thode pour d√©tecter si c'est une station radio
    isRadioStation(guildId) {
        const connection = this.connections.get(guildId);
        if (!connection) {
            console.log(`‚ùå Pas de connexion pour guildId: ${guildId}`);
            return false;
        }
        
        // V√©rifier si c'est vraiment une station radio en regardant le syst√®me de radio
        try {
            const radioModule = require('../commands/music/radio');
            if (radioModule && radioModule.radioState && radioModule.radioState.currentStation && radioModule.radioState.connection) {
                console.log(`üìª Station radio d√©tect√©e: ${radioModule.radioState.currentStation.name}`);
                return true;
            }
        } catch (error) {
            console.log(`‚ùå Erreur lors de la v√©rification de la station radio: ${error.message}`);
        }
        
        // Si connect√© mais pas de track ET pas de syst√®me de radio actif, 
        // c'est probablement une station radio
        const track = this.getCurrentTrack(guildId);
        const isRadio = connection.state.status === 'ready' && !track;
        console.log(`üîç V√©rification radio: connection=${connection.state.status}, track=${track ? 'OUI' : 'NON'}, isRadio=${isRadio}`);
        return isRadio;
    }

    // M√©thode pour obtenir le nom de la station radio
    getRadioStationName(guildId) {
        try {
            // Essayer de r√©cup√©rer le nom depuis le syst√®me de radio
            const radioModule = require('../commands/music/radio');
            if (radioModule && radioModule.radioState && radioModule.radioState.currentStation) {
                console.log(`üìª Station radio trouv√©e: ${radioModule.radioState.currentStation.name}`);
                return radioModule.radioState.currentStation.name;
            }
        } catch (error) {
            console.log(`‚ùå Erreur lors de la r√©cup√©ration de la station radio: ${error.message}`);
        }
        
        // Fallback g√©n√©rique
        console.log(`üìª Fallback: Station Radio g√©n√©rique`);
        return 'Station Radio';
    }
}

module.exports = new VoiceManager();
