#!/bin/bash

# Script de d√©marrage am√©lior√© avec debug automatique pour le bot Discord musical üï≤- ùòÆ
# Usage: ./start-with-debug.sh [dev|prod]

echo "üéµ D√©marrage du bot Discord musical üï≤- ùòÆ avec syst√®me de debug"
echo "=============================================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonction pour afficher le timestamp
timestamp() {
    echo -e "${CYAN}[$(date '+%H:%M:%S')]${NC}"
}

# Fonction pour v√©rifier les pr√©requis
check_prerequisites() {
    echo -e "$(timestamp) ${BLUE}üîç V√©rification des pr√©requis...${NC}"
    
    # V√©rifier si Node.js est install√©
    if ! command -v node &> /dev/null; then
        echo -e "$(timestamp) ${RED}‚ùå Node.js n'est pas install√©. Veuillez installer Node.js version 16 ou sup√©rieure.${NC}"
        exit 1
    fi

    # V√©rifier la version de Node.js
    NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_VERSION" -lt 16 ]; then
        echo -e "$(timestamp) ${RED}‚ùå Node.js version 16 ou sup√©rieure requis. Version actuelle: $(node -v)${NC}"
        exit 1
    fi

    echo -e "$(timestamp) ${GREEN}‚úÖ Node.js $(node -v) d√©tect√©${NC}"

    # V√©rifier si le fichier .env existe
    if [ ! -f ".env" ]; then
        echo -e "$(timestamp) ${YELLOW}‚ö†Ô∏è  Fichier .env non trouv√©.${NC}"
        if [ -f "env.example" ]; then
            cp env.example .env
            echo -e "$(timestamp) ${GREEN}‚úÖ Fichier .env cr√©√© √† partir d'env.example${NC}"
            echo -e "$(timestamp) ${YELLOW}üìù Veuillez √©diter le fichier .env avec vos configurations${NC}"
            exit 1
        else
            echo -e "$(timestamp) ${RED}‚ùå Fichier env.example non trouv√©${NC}"
            exit 1
        fi
    fi

    echo -e "$(timestamp) ${GREEN}‚úÖ Fichier .env trouv√©${NC}"
}

# Fonction pour installer les d√©pendances
install_dependencies() {
    if [ ! -d "node_modules" ]; then
        echo -e "$(timestamp) ${BLUE}üì¶ Installation des d√©pendances...${NC}"
        npm install
        if [ $? -ne 0 ]; then
            echo -e "$(timestamp) ${RED}‚ùå Erreur lors de l'installation des d√©pendances${NC}"
            exit 1
        fi
        echo -e "$(timestamp) ${GREEN}‚úÖ D√©pendances install√©es avec succ√®s${NC}"
    else
        echo -e "$(timestamp) ${GREEN}‚úÖ D√©pendances d√©j√† install√©es${NC}"
    fi
}

# Fonction pour cr√©er les dossiers n√©cessaires
create_directories() {
    echo -e "$(timestamp) ${BLUE}üìÅ Cr√©ation des dossiers n√©cessaires...${NC}"
    
    # Cr√©er le dossier logs s'il n'existe pas
    if [ ! -d "logs" ]; then
        mkdir logs
        echo -e "$(timestamp) ${GREEN}‚úÖ Dossier logs cr√©√©${NC}"
    else
        echo -e "$(timestamp) ${GREEN}‚úÖ Dossier logs existe d√©j√†${NC}"
    fi
}

# Fonction pour d√©marrer le bot avec debug
start_bot_with_debug() {
    local mode=$1
    
    echo -e "$(timestamp) ${MAGENTA}üöÄ D√©marrage du bot en mode ${mode} avec debug...${NC}"
    
    # Fonction pour nettoyer les processus √† l'arr√™t
    cleanup() {
        echo -e "\n$(timestamp) ${YELLOW}üõë Arr√™t du bot et du syst√®me de debug...${NC}"
        
        # Tuer le processus du bot
        if [ ! -z "$BOT_PID" ]; then
            kill $BOT_PID 2>/dev/null
            echo -e "$(timestamp) ${GREEN}‚úÖ Processus du bot arr√™t√©${NC}"
        fi
        
        # Tuer le processus de debug
        if [ ! -z "$DEBUG_PID" ]; then
            kill $DEBUG_PID 2>/dev/null
            echo -e "$(timestamp) ${GREEN}‚úÖ Syst√®me de debug arr√™t√©${NC}"
        fi
        
        echo -e "$(timestamp) ${BLUE}üëã Au revoir !${NC}"
        exit 0
    }

    # Capturer les signaux d'arr√™t
    trap cleanup SIGINT SIGTERM

    # D√©marrer le bot en arri√®re-plan
    if [ "$mode" = "dev" ]; then
        npm run dev &
    else
        npm start &
    fi
    
    BOT_PID=$!
    echo -e "$(timestamp) ${GREEN}‚úÖ Bot d√©marr√© avec PID: $BOT_PID${NC}"

    # Attendre un peu que le bot d√©marre
    sleep 3

    # D√©marrer le syst√®me de debug
    echo -e "$(timestamp) ${CYAN}üîç D√©marrage du syst√®me de debug...${NC}"
    ./debug.sh monitor &
    DEBUG_PID=$!
    echo -e "$(timestamp) ${GREEN}‚úÖ Syst√®me de debug d√©marr√© avec PID: $DEBUG_PID${NC}"

    # Afficher les informations de monitoring
    echo -e "$(timestamp) ${BLUE}üìä Informations de monitoring:${NC}"
    echo -e "$(timestamp) ${BLUE}   - Bot PID: $BOT_PID${NC}"
    echo -e "$(timestamp) ${BLUE}   - Debug PID: $DEBUG_PID${NC}"
    echo -e "$(timestamp) ${BLUE}   - Logs: logs/bot-$(date +%Y-%m-%d).log${NC}"
    echo -e "$(timestamp) ${BLUE}   - Appuyez sur Ctrl+C pour arr√™ter${NC}"
    echo ""

    # Surveiller les processus
    while true; do
        # V√©rifier si le bot est toujours en vie
        if ! kill -0 $BOT_PID 2>/dev/null; then
            echo -e "$(timestamp) ${RED}‚ùå Le bot s'est arr√™t√© de mani√®re inattendue${NC}"
            cleanup
        fi
        
        # V√©rifier si le debug est toujours en vie
        if ! kill -0 $DEBUG_PID 2>/dev/null; then
            echo -e "$(timestamp) ${YELLOW}‚ö†Ô∏è  Le syst√®me de debug s'est arr√™t√©${NC}"
            # Red√©marrer le debug
            ./debug.sh monitor &
            DEBUG_PID=$!
            echo -e "$(timestamp) ${GREEN}‚úÖ Syst√®me de debug red√©marr√©${NC}"
        fi
        
        sleep 5
    done
}

# Fonction principale
main() {
    local mode=${1:-prod}
    
    # V√©rifications pr√©liminaires
    check_prerequisites
    install_dependencies
    create_directories
    
    # D√©marrer le bot avec debug
    start_bot_with_debug $mode
}

# Ex√©cuter la fonction principale
main "$1"


